rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow users to read their own profile
    match /users/{userId} {
      // Allow any authenticated user to read user profiles (public data)
      allow read: if request.auth != null;
      
      // Allow users to update their own profile
      allow update, delete: if request.auth != null && request.auth.uid == userId;
      
      // Allow create profile when user signs up
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // Admins can write to any user profile
      allow write: if request.auth != null && 
                   exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Mentors collection
    match /mentors/{mentorId} {
      // Public read access so mentor list is visible without login
      allow read: if true;
      
      // Allow users to create and update their own mentor profile with a simpler rule
      allow create, update, delete: if request.auth != null && 
                    (request.auth.uid == mentorId || 
                     request.auth.uid == resource.data.userId ||
                     exists(/databases/$(database)/documents/mentors/$(request.auth.uid)));
      
      // Admin can write to any mentor profile
      allow write: if request.auth != null && 
                   exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Mentees collection
    match /mentees/{menteeId} {
      allow read: if request.auth != null; // Anyone logged in can view mentees
      allow write: if request.auth != null && 
                    (request.auth.uid == menteeId || 
                     request.auth.uid == resource.data.userId ||
                     exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    // Sessions collection - all authenticated users can read sessions
    match /sessions/{sessionId} {
      allow read: if request.auth != null;
      // Allow users to create sessions if they are authenticated
      allow create: if request.auth != null;
      // Allow users to update sessions only if they are involved in the session
      allow update, delete: if request.auth != null && 
                      (request.auth.uid == resource.data.mentorId || 
                       request.auth.uid == resource.data.menteeId || 
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    // Availability collection
    match /availability/{docId} {
      allow read: if request.auth != null; // Anyone logged in can view availability
      
      // Allow creating availability documents
      allow create: if request.auth != null;
      
      // Allow updating availability if you are the mentor, booking the slot, involved in a session, or an admin
      allow update, delete: if request.auth != null && 
                    (
                      // Direct match with Auth UID (mentor)
                      request.auth.uid == resource.data.mentorId ||
                      
                      // Check if the current user is the mentor via mentor document lookup
                      exists(/databases/$(database)/documents/mentors/$(resource.data.mentorId)) &&
                      get(/databases/$(database)/documents/mentors/$(resource.data.mentorId)).data.userId == request.auth.uid ||
                      
                      // Allow any authenticated user to book an available slot: only change isBooked from false->true and set updatedAt/sessionId.
                      (resource.data.isBooked == false && request.resource.data.isBooked == true &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isBooked','updatedAt','sessionId'])) ||
                      
                      // Allow users to update availability when cancelling their sessions
                      // This allows setting isBooked back to false when a session is cancelled
                      // We limit this to only setting isBooked to false and updating timestamp
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isBooked', 'updatedAt']) &&
                       request.resource.data.isBooked == false) ||
                      
                      // Admin check
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
                    );
    }
    
    // Ratings collection
    match /ratings/{ratingId} {
      allow read: if true; // Public read access so ratings are visible without login
      allow create: if request.auth != null; // Anyone logged in can create ratings
      allow update, delete: if request.auth != null && 
                      (request.auth.uid == resource.data.userId || 
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    // Payments collection
    match /payments/{paymentId} {
      /*
        Allow any authenticated user to read a payment **iff** one of the following is true:
        1. They are listed directly on the payment document (mentorId, menteeId, or userId).
        2. They are referenced via the alternate mentorDocId / menteeDocId fields found in some older documents.
        3. They are an admin user.
        This broader check eliminates the "Missing or insufficient permissions" errors some users were seeing while still
        keeping payment data restricted to the parties involved (or admins).
      */
      allow read: if request.auth != null && (
        // Direct references that newer documents have
        request.auth.uid == resource.data.mentorId ||
        request.auth.uid == resource.data.menteeId ||
        request.auth.uid == resource.data.userId ||

        // Fallback for older documents that stored the auth UID in mentorDocId / menteeDocId
        request.auth.uid == resource.data.mentorDocId ||
        request.auth.uid == resource.data.menteeDocId ||

        // Admin override
        (
          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
        )
      );

      // Allow creating payment records
      allow create: if request.auth != null;

      // Allow mentors or mentees involved in the payment to update the **status** field (e.g. to mark as refunded)
      // We restrict the writable fields to just `status` and `updatedAt` to avoid unwanted modifications.
      allow update: if request.auth != null && (
        // Involved parties
        (request.auth.uid == resource.data.mentorId ||
         request.auth.uid == resource.data.menteeId ||
         request.auth.uid == resource.data.userId) &&
        // Only allow changing status and updatedAt fields
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt'])
      );

      // Admins can freely update or delete any payment document
      allow update, delete: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
} 